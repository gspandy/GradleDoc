.. highlight:: rst

.. _buildBasics:

构建脚本基础
============================

项目(Projects)和任务(tasks)
------------------------------------------------------------    
Gradle 中的任何内容都是基于项目和任务这两个基本概念。

每个Gradle构建都是由一个或多个项目组成。一个项目代表你软件产品中可以独立构建的一些模块。具体的依赖于你要构建什么。例如，一个项目可以代表一个jar包或者是一个web应用程序。他也可以代表将一堆由其他项目提供的jar组装成一个发布zip。项目不一定代表构建什么东西，也可以代表一些动作比如发布你应用到测试或生产环境。如果现在理解这些有点模糊也没有关系。

每个项目都是由一个或多个任务组成。每个任务代表构建系统中的一个原子操作。例如编译一些类，创建一个jar，生成Java 文档或者发布一些包到仓库中。

现在我们就来看看在一个项目中定义一些简单的任务。在后续的章节中我们将介绍（） 以及关于项目和任务的更多内容。

Hello world
------------------------------------------------------------
你可以通过 ``gradle`` 命令来运行一个Gradle 构建。 ``gradle`` 命令将会在当前目录中寻找名为 ``build.gradle`` 的文件 [2]_ 。从严格意义上来讲 ``build.gradle`` 是一个构建配置脚本，但我们还是习惯性的称他为构建脚本。 这个构建脚本定义了一个项目（project) 以及这个项目的任务。

动手尝试，创建一个名为 build.gradle 的文件，其内容如下。

.. code-block:: ruby

    task hello {
        doLast {
            println 'Hello world!'
        }
    }
    
在命令行中，进入build.gradle 所在目录并通过 ``gradle -q hello`` 来运行这个脚本。

.. sidebar:: -q的作用

   在该文档中大部分例子都会带一个 -q 选项。阻止Gradle本身log输出。这样就只有任务的输出才会显示。这样就能让该手册中的

**gradle -q hello** 的输出结果如下
::

        > gradle -q hello
        Hello world!


短任务的定义
------------------------------------------------------------    

构建脚本就是代码
------------------------------------------------------------    

任务的依赖
------------------------------------------------------------    

动态任务
------------------------------------------------------------    

操作已存在的任务
------------------------------------------------------------    

快捷符号
------------------------------------------------------------    

任务的动态属性
------------------------------------------------------------    

使用Ant任务
------------------------------------------------------------    

使用方法
------------------------------------------------------------    

默认任务
------------------------------------------------------------    

使用DAG配置
------------------------------------------------------------    

总结
------------------------------------------------------------    

.. [2] 这一行为可以通过命令选项来改变。
